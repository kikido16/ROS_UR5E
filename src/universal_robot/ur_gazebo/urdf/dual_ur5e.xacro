<?xml version="1.0"?>
<robot xmlns:xacro="http://wiki.ros.org/xacro" name="$(arg robot_model)_robot">
  <!--
    This is a top-level xacro instantiating the Gazebo-specific version of the
    'ur_robot' macro (ie: 'ur_robot_gazebo') and passing it values for all its
    required arguments.

    This file should be considered the Gazebo-specific variant of the file
    with the same name in the ur_description package. It accepts the same
    arguments, but instead of configuring everything for a real robot, will
    generate a Gazebo-compatible URDF with a ros_control hardware_interface
    attached to it.

    Only use this top-level xacro if you plan on spawning the robot in Gazebo
    'by itself', without any gripper or any other geometry attached.

    If you need to attach an end-effector, camera or need to integrate the
    robot into a larger workcell and want to spawn that as a single entity in
    Gazebo, DO NOT EDIT THIS FILE.

    Instead: create a new top-level xacro, give it a proper name, include the
    required '.xacro' files, instantiate the models (ie: call the macros) and
    connect everything by adding the appropriate joints.
  -->

  <!--
    Import main macro.

    NOTE: this imports the Gazebo-wrapper main macro, NOT the regular
          xacro macro (which is hosted by ur_description).
  -->
  <xacro:include filename="$(find ur_gazebo)/urdf/ur_macro.xacro"/>
  <!-- <xacro:include filename="$(find ur_gazebo)/urdf/inc/body_macro.xacro"/> -->
  <!-- <xacro:include filename="$(find ur_gazebo)/urdf/inc/dh_pgi_macro.xacro"/> -->
  <xacro:include filename="$(find ur_gazebo)/urdf/inc/tool_camera_macro.xacro"/>

  <!--Declare arguments -->
  <xacro:arg name="joint_limit_params" default="$(find ur_description)/config/ur5e/joint_limits.yaml"/>
  <xacro:arg name="kinematics_params" default="$(find ur_description)/config/ur5e/default_kinematics.yaml"/>
  <xacro:arg name="physical_params" default="$(find ur_description)/config/ur5e/physical_parameters.yaml"/>
  <xacro:arg name="visual_params" default="$(find ur_description)/config/ur5e/visual_parameters.yaml"/>
  <!--
    legal values:
      - hardware_interface/PositionJointInterface
      - hardware_interface/VelocityJointInterface
      - hardware_interface/EffortJointInterface

    NOTE: this value must correspond to the controller configured in the
          controller .yaml files in the 'config' directory.
  -->
  <xacro:arg name="transmission_hw_interface" default="hardware_interface/PositionJointInterface"/>
  <xacro:arg name="safety_limits" default="false"/>
  <xacro:arg name="safety_pos_margin" default="0.15"/>
  <xacro:arg name="safety_k_position" default="20"/>

  <!-- Instantiate the Gazebo robot and pass it all the required arguments. -->
 

  <!--
    Attach the Gazebo model to Gazebo's world frame.

    Note: if you're looking to integrate a UR into a larger scene and need
    to add EEFs or other parts, DO NOT change this file or the 'world' link
    here. Create a NEW xacro instead and decide whether you need to add
    a 'world' link there.
  -->

  <link name="world"/>

  <!-- add desk  -->
  <xacro:include filename="$(find dual_description)/urdf/inc/desk_urdf.xacro"/>
  <xacro:desk_urdf
     parent_link="world"
  />
  <!-- add body  -->
  <xacro:include filename="$(find dual_description)/urdf/inc/body_urdf.xacro"/>
  <xacro:body_urdf
     parent_link="desk_mount_link"
     top_p="0.20"
     top_camera_p="0.45"
  />

  <!-- left_ur5e_arm -->
  <xacro:ur_robot_gazebo
  prefix="left_"
  joint_limits_parameters_file="$(arg joint_limit_params)"
  kinematics_parameters_file="$(arg kinematics_params)"
  physical_parameters_file="$(arg physical_params)"
  visual_parameters_file="$(arg visual_params)"
  transmission_hw_interface="$(arg transmission_hw_interface)"
  safety_limits="$(arg safety_limits)"
  safety_pos_margin="$(arg safety_pos_margin)"
  safety_k_position="$(arg safety_k_position)"/>

  <!-- mount left_arm to dbody -->
  <joint name="left_fixed" type="fixed">
    <parent link="base_left_virtual_link"/>
    <child link="left_base_link"/>
    <origin xyz="0 0 0" rpy="0 0 3.141592653" />
   </joint>
  

  <!-- right_ur5e_arm  -->
  <xacro:ur_robot_gazebo
  prefix="right_"
  joint_limits_parameters_file="$(arg joint_limit_params)"
  kinematics_parameters_file="$(arg kinematics_params)"
  physical_parameters_file="$(arg physical_params)"
  visual_parameters_file="$(arg visual_params)"
  transmission_hw_interface="$(arg transmission_hw_interface)"
  safety_limits="$(arg safety_limits)"
  safety_pos_margin="$(arg safety_pos_margin)"
  safety_k_position="$(arg safety_k_position)"
/>
  <!-- mount right_arm to body -->
  <joint name="right_fixed" type="fixed">
    <parent link="base_right_virtual_link"/>
    <child link="right_base_link"/>
    <origin xyz="0 0 0" rpy="0 0 1.57 " />
  </joint>


  <!-- mount left_gripper to left_arm -->
  <!-- left_gripper  -->
  <!-- <xacro:dh_pgi140
    prefix="left_"
    />
  <joint name="left_gripper_joint" type="fixed">
    <parent link="left_tool0"/>
    <child link="left_dh_base_link"/>
    <origin xyz="0 0 0" rpy="0 0 0"/>
  </joint> -->

  <!-- mount right_gripper to left_arm -->
  <!-- rightgripper  -->
  <!-- <xacro:dh_pgi140
  prefix="right_"
  />
  <joint name="right_gripper_joint" type="fixed">
    <parent link="right_tool0"/>
    <child link="right_dh_base_link"/>
    <origin xyz="0 0 0" rpy="0 0 0"/>
  </joint> -->

  <!-- mount left camera_load to gripper -->
  <!-- <xacro:tool_camera
  prefix="left_"
  />
  <joint name="left_tool_camera_joint" type="fixed">
    <parent link="left_dh_load1_link"/>
    <child link="left_tool_base_link"/>
    <origin xyz="0 0 0" rpy="3.141592653 0 0"/>
  </joint> -->

  <!-- mount right camera_load to gripper -->
  <!-- <xacro:tool_camera
  prefix="right_"
  />
  <joint name="right_tool_camera_joint" type="fixed">
    <parent link="right_dh_load1_link"/>
    <child link="right_tool_base_link"/>
    <origin xyz="0 0 0" rpy="3.141592653 0 0"/>
  </joint> -->


  <!-- <link name="tool0_controller"/>
  <joint name="tool_controller_fake_joint" type="fixed">
    <parent link="tool0"/>
    <child link="tool0_controller"/>
    <origin xyz="0 0 0" rpy="0 0 0"/>
  </joint> -->
  


  <!-- cameras -->
  <!-- Realsense Camera Primary and Secondary -->
  <!-- TOP D435i -->
  <xacro:arg name="realsense_enabled"             default="$(optenv DUAL_REALSENSE_ENABLED 1)" />
  <xacro:arg name="realsense_model"               default="$(optenv DUAL_REALSENSE_MODEL d435i)"/>
  <xacro:arg name="realsense_topic"               default="$(optenv DUAL_REALSENSE_TOPIC top_camera_realsense)" />
  <xacro:arg name="realsense_prefix"              default="$(optenv DUAL_REALSENSE_PREFIX top_camera)" />
  <xacro:arg name="realsense_parent"              default="$(optenv DUAL_REALSENSE_PARENT top_camera_virtual_link)" />
  <xacro:arg name="realsense_xyz"                 default="$(optenv DUAL_REALSENSE_XYZ 0.01 0 -0.01)" />
  <xacro:arg name="realsense_rpy"                 default="$(optenv DUAL_REALSENSE_RPY 0 0 0)" />
  <xacro:property name="realsense_model"          value="$(arg realsense_model)"/>
  <!-- LEFT D435i -->
  <xacro:arg name="realsense_secondary_enabled"   default="$(optenv DUAL_REALSENSE_SECONDARY_ENABLED 1)" />
  <xacro:arg name="realsense_secondary_model"     default="$(optenv DUAL_REALSENSE_SECONDARY_MODEL d435i)"/>
  <xacro:arg name="realsense_secondary_topic"     default="$(optenv DUAL_REALSENSE_SECONDARY_TOPIC left_realsense)" />
  <xacro:arg name="realsense_secondary_prefix"    default="$(optenv DUAL_REALSENSE_SECONDARY_PREFIX left_camera)" />
  <xacro:arg name="realsense_secondary_parent"    default="$(optenv DUAL_REALSENSE_SECONDARY_PARENT left_tool0)" />
  <xacro:arg name="realsense_secondary_xyz"       default="$(optenv DUAL_REALSENSE_SECONDARY_XYZ 0 -0.1 0.011)" />
  <xacro:arg name="realsense_secondary_rpy"       default="$(optenv DUAL_REALSENSE_SECONDARY_RPY 0 -1.57 1.57)" />
  <xacro:property name="realsense_secondary_model" value="$(arg realsense_secondary_model)"/>
  <!-- RIGHT D435i -->
  <xacro:arg name="realsense_tertiary_enabled"   default="$(optenv DUAL_REALSENSE_TERTIARY_ENABLED 1)" />
  <xacro:arg name="realsense_tertiary_model"     default="$(optenv DUAL_REALSENSE_TERTIARY_MODEL d435i)"/>
  <xacro:arg name="realsense_tertiary_topic"     default="$(optenv DUAL_REALSENSE_TERTIARY_TOPIC right_realsense)" />
  <xacro:arg name="realsense_tertiary_prefix"    default="$(optenv DUAL_REALSENSE_TERTIARY_PREFIX right_camera)" />
  <xacro:arg name="realsense_tertiary_parent"    default="$(optenv DUAL_REALSENSE_TERTIARY_PARENT right_tool0)" />
  <xacro:arg name="realsense_tertiary_xyz"       default="$(optenv DUAL_REALSENSE_TERTIARY_XYZ 0 -0.055 0.011)" />
  <xacro:arg name="realsense_tertiary_rpy"       default="$(optenv DUAL_REALSENSE_TERTIARY_RPY 0 -1.57 1.57)" />
  <xacro:property name="realsense_tertiary_model" value="$(arg realsense_tertiary_model)"/>
  
  <xacro:include filename="$(find dual_description)/urdf/inc/intel_realsense.urdf.xacro"/>
  <xacro:arg name="use_nominal_extrinsics" default="true"/>
    <!-- Intel Realsense Primary and Secondary -->
  <xacro:property name="realsense_enabled" value="$(arg realsense_enabled)"/>
  <xacro:property name="realsense_secondary_enabled" value="$(arg realsense_secondary_enabled)"/>
  <xacro:property name="realsense_tertiary_enabled" value="$(arg realsense_tertiary_enabled)"/>
  <xacro:if value="${realsense_enabled or realsense_secondary_enabled or realsense_tertiary_enabled}">
      <xacro:if value="${realsense_model == 'd435'}">
        <xacro:include filename="$(find realsense2_description)/urdf/_d435.urdf.xacro" />
      </xacro:if>
      <xacro:if value="${realsense_model == 'd435i'}">
        <xacro:include filename="$(find realsense2_description)/urdf/_d435i.urdf.xacro" />
      </xacro:if>
      <xacro:if value="${realsense_model == 'd415'}">
        <xacro:include filename="$(find realsense2_description)/urdf/_d415.urdf.xacro" />
      </xacro:if>
      <xacro:if value="${realsense_model == 'd455'}">
        <xacro:include filename="$(find realsense2_description)/urdf/_d435.urdf.xacro" />
      </xacro:if>
  </xacro:if>
  <!-- TOP camera -->
  <xacro:if value="$(arg realsense_enabled)">
    <xacro:realsense_sensor rs_model="$(arg realsense_model)"
                            prefix="$(arg realsense_prefix)"
                            parent="$(arg realsense_parent)"
                            topic="$(arg realsense_topic)"
                            include="0"
                            use_nominal_extrinsics="true">
      <origin xyz="$(arg realsense_xyz)" rpy="$(arg realsense_rpy)"/>
    </xacro:realsense_sensor>
  </xacro:if>
  <!-- LEFT camera -->
  <xacro:if value="$(arg realsense_secondary_enabled)">
    <xacro:realsense_sensor rs_model="$(arg realsense_secondary_model)"
                            prefix="$(arg realsense_secondary_prefix)"
                            parent="$(arg realsense_secondary_parent)"
                            topic="$(arg realsense_secondary_topic)"
                            include="0"
                            use_nominal_extrinsics="true">
      <origin xyz="$(arg realsense_secondary_xyz)" rpy="$(arg realsense_secondary_rpy)"/>
    </xacro:realsense_sensor>
  </xacro:if>
  <!-- RIGHT camera -->
  <xacro:if value="$(arg realsense_tertiary_enabled)">
    <xacro:realsense_sensor rs_model="$(arg realsense_tertiary_model)"
                            prefix="$(arg realsense_tertiary_prefix)"
                            parent="$(arg realsense_tertiary_parent)"
                            topic="$(arg realsense_tertiary_topic)"
                            include="0"
                            use_nominal_extrinsics="true">
      <origin xyz="$(arg realsense_tertiary_xyz)" rpy="$(arg realsense_tertiary_rpy)"/>
    </xacro:realsense_sensor>
  </xacro:if>


  <!-- TOP mid360 -->
  <xacro:arg name="mid360_enable" default="false"/>
  <xacro:if value="$(arg mid360_enable)">
  <xacro:include filename="$(find livox_laser_simulation)/urdf/livox_mid360_imu.xacro"/>

  <xacro:mid360_imu />
   <joint name="top_mid_joint" type="fixed" >
    <parent link="top_mid_virtual_link" />
    <child link="livox_base" />
    <origin xyz="0 0 0.0" rpy="1.57 1.57 3.14" />
  </joint>
</xacro:if>


  <!-- <xacro:arg name="use_nominal_extrinsics" default="true"/>
  <xacro:include filename="$(find realsense2_description)/urdf/_d435i.urdf.xacro" />

  <xacro:sensor_d435i parent="top_camera_virtual_link" name="camera0" use_nominal_extrinsics="$(arg use_nominal_extrinsics)">
    <origin xyz="0.01 0 -0.01" rpy="0 0 0"/>
  </xacro:sensor_d435i>

  <xacro:sensor_d435i parent="left_tool0" name="camera1" use_nominal_extrinsics="$(arg use_nominal_extrinsics)">
    <origin xyz="-0.07 0 0" rpy="0 -1.57 0"/>
  </xacro:sensor_d435i>

  <xacro:sensor_d435i parent="right_tool0" name="camera2" use_nominal_extrinsics="$(arg use_nominal_extrinsics)">
    <origin xyz="-0.07 0 0" rpy="0 -1.57 0"/>
  </xacro:sensor_d435i> -->

<!-- <link name="right_camera_color_optical_calibration_frame"></link> -->
    <!-- <joint name="right_camera_camera_color_optical_frame_joint" type="fixed">
        <parent link="right_tool0"/>
        <child link="right_camera_color_optical_calibration_frame"/>
        <origin xyz="-0.030 -0.072 0.002" rpy="-0.001 -0.017 0.014" />
    </joint>  -->
    <!-- add camera4 -->
<!-- <link name="left_camera_color_optical_calibration_frame"></link> -->
    <!-- <joint name="left_camera_camera_color_optical_frame_joint" type="fixed">
        <parent link="left_tool0"/>
        <child link="left_camera_color_optical_calibration_frame"/>
        <origin xyz="-0.024 -0.158 0.028" rpy="-0.004 -0.04 0.004" />
    </joint>  -->
<!-- add 3f-flange -->
    <xacro:include filename="$(find dual_description)/urdf/inc/fff_flange_urdf.xacro"/>
    <xacro:fff_flange_urdf
        parent_link="left_flange"/>
   <!-- add 2f-flange -->
    <xacro:include filename="$(find dual_description)/urdf/inc/ff_flange_urdf.xacro"/>
    <xacro:ff_flange_urdf
        parent_link="right_flange"/>

  <!--
    Inject Gazebo ROS Control plugin, which allows us to use ros_control
    controllers to control the virtual robot hw.
  -->
  <gazebo>
    <plugin name="ros_control" filename="libgazebo_ros_control.so">
      <robotNamespace>/gazebo_ros_control</robotNamespace>
     
    </plugin>
  </gazebo>
</robot>
